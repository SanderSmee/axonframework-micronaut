package org.github.goldsam.axonframework.micronaut.eventsourcing;

import io.micronaut.context.BeanContext;
import io.micronaut.context.annotation.Prototype;
import io.micronaut.inject.BeanDefinition;
import org.axonframework.eventhandling.DomainEventMessage;
import org.axonframework.eventsourcing.AggregateFactory;
import org.axonframework.eventsourcing.IncompatibleAggregateException;
import java.lang.annotation.Annotation;
import javax.annotation.PostConstruct;
import javax.inject.Inject;
import static java.lang.String.format;

/**
 * AggregateFactory implementation that creates Aggregate instances for
 * types configured as prototype beans.
 * 
 * @param <T> The type of aggregate generated by this aggregate factory
 * @author Sam Goldmann
 */
public class PrototypeBeanAggregateFactory<T> implements AggregateFactory<T> {

    private BeanContext beanContext;
    private final Class<T> aggregateType;
    
    /**
     * Initializes the factory to create beans instances for the bean with given type.
     * <p>
     * Note that the the bean should have the prototype scope.
     *
     * @param aggregateType the type of the aggregate to create.
     */
    public PrototypeBeanAggregateFactory(Class<T> aggregateType) {
        this.aggregateType = aggregateType;
    }
    
    @Inject
    void setBeanContext(BeanContext beanContext) {
        this.beanContext = beanContext;
    }
    
    @Override
    public T createAggregateRoot(String aggregateIdentifier, DomainEventMessage<?> firstEvent) {
        return beanContext.createBean(getAggregateType());
    }

    @Override
    public Class<T> getAggregateType() {
        return aggregateType;
    }
    
    /**
     * Ensures that a given scope is a "prototype" scope.
     * @param scope Scope to validate.
     * @param beanName name of associated bean to report in messages when 
     *        throw an {@link IncompatibleAggregateException} exception.
     * @throws IncompatibleAggregateException to indicate the scope not a valid
     *         "prototype" scope for a given bean.
     */
    @SuppressWarnings("unchecked")
    protected void validatePrototypeScope(Class<? extends Annotation> scope, String beanName) throws IncompatibleAggregateException {
        if (scope != Prototype.class) {
             throw new IncompatibleAggregateException(
                    format("The bean with name '%s' does not have the 'prototype' scope.", beanName));
        }
    }

    @PostConstruct
    void init() {
        BeanDefinition<T> beanDefinition = beanContext.getBeanDefinition(aggregateType);
        beanDefinition.getScope().ifPresent(s -> validatePrototypeScope(s, beanDefinition.getName()));    
    }
}